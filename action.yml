name: "Supply Chain Guard (JS)"
description: "ni --frozen + (optional) no-scripts + minimumReleaseAge + GH Advisory (malware) + OpenSSF + GuardDog (Docker)"
author: "Pirikara"
branding:
  color: purple
  icon: shield

inputs:
  node-version:
    description: "Node version for this job (e.g. 'lts/*' or '22' or '24')"
    default: "lts/*"

  ignore-scripts:
    description: "Disable lifecycle scripts during install (npm/pnpm/bun use --ignore-scripts, Yarn Berry uses env)"
    default: "true"

  minimum-age-days:
    description: "Minimum release age (days) for newly added / updated dependencies"
    default: "7"

  enable-ossf:
    description: "Check against OpenSSF malicious-packages (warn)"
    default: "true"

  enable-guarddog:
    description: "Run GuardDog npm scan via Docker (heuristics: typo, suspicious install scripts, etc.)"
    default: "false"

  guarddog-rules:
    description: "GuardDog rules CSV"
    default: "typosquat,suspicious_install_scripts,network_download,obfuscation"

  guarddog-fail:
    description: "Fail the job when GuardDog finds findings (>0)"
    default: "false"

  warn-only:
    description: "Warn (do not fail) for: minimumAge / OpenSSF / GuardDog"
    default: "true"

  workdir:
    description: "Working directory (where package.json/lockfile live)"
    default: "."

outputs:
  changed-count:
    description: "Count of changed deps in this PR (from dep-diff)"
    value: ${{ steps.diff.outputs.changed }}
  age-violations-count:
    description: "Count of minimumReleaseAge violations (best-effort)"
    value: ${{ steps.age_count.outputs.count }}
  malware-hits-count:
    description: "Count of GH Advisory (type: malware) hits (best-effort)"
    value: ${{ steps.adv_count.outputs.count }}
  guarddog-findings-count:
    description: "Count of GuardDog findings (best-effort)"
    value: ${{ steps.guarddog_count.outputs.count }}

runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 
      with:
        fetch-depth: 0

    - name: Setup Node
      uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444
      with:
        node-version: ${{ inputs.node-version }}

    - name: Enable Corepack
      shell: bash
      run: corepack enable || true

    - name: Verify dist assets exist
      shell: bash
      run: |
        set -e
        test -f "$GITHUB_ACTION_PATH/dist/dep-diff.js" || { echo "::error::dist/dep-diff.js not found (build & commit dist)"; exit 1; }
        test -f "$GITHUB_ACTION_PATH/dist/check-age.js" || { echo "::error::dist/check-age.js not found (build & commit dist)"; exit 1; }
        test -f "$GITHUB_ACTION_PATH/dist/check-gh-malware.js" || { echo "::error::dist/check-gh-malware.js not found (build & commit dist)"; exit 1; }
        test -f "$GITHUB_ACTION_PATH/dist/check-ossf.js" || { echo "::error::dist/check-ossf.js not found (build & commit dist)"; exit 1; }

    - name: Frozen install (lock/integrity check)
      shell: bash
      working-directory: ${{ inputs.workdir }}
      run: |
        set -euo pipefail

        if ! command -v jq >/dev/null 2>&1; then
          sudo apt-get update -y && sudo apt-get install -y jq
        fi

        pkgmgr=$(jq -r '.packageManager // empty' package.json 2>/dev/null || true)

        is_berry=false
        if [ -n "$pkgmgr" ] && printf "%s" "$pkgmgr" | grep -q '^yarn@'; then
          if command -v yarn >/dev/null 2>&1; then
            if ! yarn --version | grep -q '^1\.'; then
              is_berry=true
            fi
          fi
        fi

        if $is_berry || [ -f yarn.lock ] && command -v yarn >/dev/null 2>&1 && ! yarn --version | grep -q '^1\.'; then
          echo 'checksumBehavior: "throw"' >> .yarnrc.yml
          if [ "${{ inputs.ignore-scripts }}" = "true" ]; then
            YARN_ENABLE_SCRIPTS=false yarn install --immutable --inline-builds
          else
            yarn install --immutable --inline-builds
          fi
        elif [ -f pnpm-lock.yaml ] || printf "%s" "$pkgmgr" | grep -q '^pnpm@'; then
          if ! command -v pnpm >/dev/null 2>&1; then corepack prepare pnpm@latest --activate || true; fi
          if [ "${{ inputs.ignore-scripts }}" = "true" ]; then
            pnpm install --frozen-lockfile --ignore-scripts
          else
            pnpm install --frozen-lockfile
          fi
        elif [ -f package-lock.json ] || printf "%s" "$pkgmgr" | grep -q '^npm@'; then
          if [ "${{ inputs.ignore-scripts }}" = "true" ]; then
            npm ci --ignore-scripts
          else
            npm ci
          fi
        else
          echo "::warning::No known lockfile found. Falling back to npm ci."
          if [ "${{ inputs.ignore-scripts }}" = "true" ]; then
            npm ci --ignore-scripts
          else
            npm ci
          fi
        fi

    - name: Compute changed dependencies
      id: diff
      shell: bash
      working-directory: ${{ inputs.workdir }}
      run: |
        set -e
        node "$GITHUB_ACTION_PATH/dist/dep-diff.js" > changed.json
        count=$(jq 'length' changed.json 2>/dev/null || echo 0)
        echo "changed=$count" >> "$GITHUB_OUTPUT"
        echo "Changed deps: $count"
        cat changed.json

    - name: Minimum release age
      if: steps.diff.outputs.changed != '0'
      shell: bash
      working-directory: ${{ inputs.workdir }}
      env:
        MIN_DAYS: ${{ inputs.minimum-age-days }}
        WARN_ONLY: ${{ inputs.warn-only }}
      run: |
        set -e
        node "$GITHUB_ACTION_PATH/dist/check-age.js" changed.json "$MIN_DAYS" "$WARN_ONLY" || exit $?

    - name: Count age violations (best-effort)
      id: age_count
      if: steps.diff.outputs.changed != '0'
      shell: bash
      run: |
        echo "count=0" >> "$GITHUB_OUTPUT" || true

    - name: GitHub Advisory (malware)
      if: steps.diff.outputs.changed != '0'
      shell: bash
      working-directory: ${{ inputs.workdir }}
      env:
        GITHUB_TOKEN: ${{ github.token }}
        WARN_ONLY: "false"
      run: |
        set -e
        node "$GITHUB_ACTION_PATH/dist/check-gh-malware.js" changed.json "$WARN_ONLY"

    - name: Count malware hits (best-effort)
      id: adv_count
      if: steps.diff.outputs.changed != '0'
      shell: bash
      run: echo "count=0" >> "$GITHUB_OUTPUT" || true

    - name: OpenSSF malicious-packages (warn)
      if: steps.diff.outputs.changed != '0' && inputs.enable-ossf == 'true'
      shell: bash
      working-directory: ${{ inputs.workdir }}
      run: |
        set -e
        git clone --depth=1 https://github.com/ossf/malicious-packages /tmp/ossf
        node "$GITHUB_ACTION_PATH/dist/check-ossf.js" changed.json /tmp/ossf || true

    - name: GuardDog (Docker)
      if: steps.diff.outputs.changed != '0' && inputs.enable-guarddog == 'true'
      shell: bash
      working-directory: ${{ inputs.workdir }}
      run: |
        set -euo pipefail
        pkgs=$(jq -r '.[].name' changed.json | sort -u | tr '\n' ' ')
        if [ -z "$pkgs" ]; then
          echo "No changed packages -> skip guarddog"
          exit 0
        fi

        docker run --rm ghcr.io/datadog/guarddog \
          npm scan $pkgs \
          --rules "${{ inputs.guarddog-rules }}" \
          --output-format json > guarddog.json || true

        if [ -s guarddog.json ]; then
          total=$(jq 'length' guarddog.json 2>/dev/null || echo 0)
          echo "GuardDog findings: $total"
          if [ "$total" != "0" ] && [ "${{ inputs.guarddog-fail }}" = "true" ]; then
            echo "::error::GuardDog reported $total findings"
            exit 1
          fi
        else
          echo "GuardDog produced no output."
        fi

    - name: Count GuardDog findings (best-effort)
      id: guarddog_count
      if: steps.diff.outputs.changed != '0' && inputs.enable-guarddog == 'true'
      shell: bash
      working-directory: ${{ inputs.workdir }}
      run: |
        if [ -s guarddog.json ]; then
          echo "count=$(jq 'length' guarddog.json)" >> "$GITHUB_OUTPUT"
        else
          echo "count=0" >> "$GITHUB_OUTPUT"
        fi

    - name: Summary (preview)
      shell: bash
      run: |
        echo "Changed deps: ${{ steps.diff.outputs.changed }}"
        echo "Age violations (best-effort): ${{ steps.age_count.outputs.count }}"
        echo "Malware hits (best-effort): ${{ steps.adv_count.outputs.count }}"
        echo "GuardDog findings (best-effort): ${{ steps.guarddog_count.outputs.count }}"
