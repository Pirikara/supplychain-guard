name: "Supply Chain Guard (JS)"
description: "ni --frozen + (optional) no-scripts + minimumReleaseAge + GH Advisory (malware) + OpenSSF + GuardDog (Docker)"
author: "Pirikara"
branding:
  color: purple
  icon: shield

inputs:
  node-version:
    description: "Node version for this job (e.g. 'lts/*' or '22' or '24')"
    default: "lts/*"

  ignore-scripts:
    description: "Disable lifecycle scripts during install (npm/pnpm/bun use --ignore-scripts, Yarn Berry uses env)"
    default: "true"

  minimum-age-days:
    description: "Minimum release age (days) for newly added / updated dependencies"
    default: "7"

  enable-ossf:
    description: "Check against OpenSSF malicious-packages (warn)"
    default: "true"

  enable-guarddog:
    description: "Run GuardDog npm scan via Docker (heuristics: typo, suspicious install scripts, etc.)"
    default: "false"

  guarddog-rules:
    description: "GuardDog rules (space-separated)"
    default: "typosquatting npm-install-script npm-obfuscation npm-silent-process-execution direct_url_dependency"

  guarddog-fail:
    description: "Fail the job when GuardDog finds findings (>0)"
    default: "false"

  warn-only:
    description: "Warn (do not fail) for: minimumAge / OpenSSF / GuardDog"
    default: "true"

  workdir:
    description: "Working directory (where package.json/lockfile live)"
    default: "."

outputs:
  changed-count:
    description: "Count of changed deps in this PR (from dep-diff)"
    value: ${{ steps.diff.outputs.changed }}
  age-violations-count:
    description: "Count of minimumReleaseAge violations (best-effort)"
    value: ${{ steps.age_count.outputs.count }}
  malware-hits-count:
    description: "Count of GH Advisory (type: malware) hits (best-effort)"
    value: ${{ steps.adv_count.outputs.count }}
  guarddog-findings-count:
    description: "Count of GuardDog findings (best-effort)"
    value: ${{ steps.guarddog_count.outputs.count }}

runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 
      with:
        fetch-depth: 0

    - name: Setup Node
      uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444
      with:
        node-version: ${{ inputs.node-version }}

    - name: Enable Corepack
      shell: bash
      run: corepack enable || true

    - name: Verify dist assets exist
      shell: bash
      run: |
        set -e
        test -f "$GITHUB_ACTION_PATH/dist/dependency-review.js" || { echo "::error::dist/dependency-review.js not found (build & commit dist)"; exit 1; }
        test -f "$GITHUB_ACTION_PATH/dist/check-age.js" || { echo "::error::dist/check-age.js not found (build & commit dist)"; exit 1; }
        test -f "$GITHUB_ACTION_PATH/dist/check-ossf.js" || { echo "::error::dist/check-ossf.js not found (build & commit dist)"; exit 1; }
        test -f "$GITHUB_ACTION_PATH/dist/frozen-install.js" || { echo "::error::dist/frozen-install.js not found (build & commit dist)"; exit 1; }

    - name: Frozen install (lock/integrity check)
      shell: bash
      working-directory: ${{ inputs.workdir }}
      run: |
        set -e
        echo "Running multi-ecosystem frozen install check..."
        node "$GITHUB_ACTION_PATH/dist/frozen-install.js" "${{ inputs.workdir }}" "${{ inputs.ignore-scripts }}"

    - name: Dependency Review (unified check)
      id: review
      shell: bash
      working-directory: ${{ inputs.workdir }}
      env:
        GITHUB_TOKEN: ${{ github.token }}
        WARN_ONLY: ${{ inputs.warn-only }}
      run: |
        set -e
        echo "Running unified dependency review..."

        # Use new unified dependency review that combines dep-diff + malware check
        node "$GITHUB_ACTION_PATH/dist/dependency-review.js" changed.json malware-hits.json "$WARN_ONLY" > changed.json

        count=$(jq 'length' changed.json 2>/dev/null || echo 0)
        malware_count=$(jq 'length' malware-hits.json 2>/dev/null || echo 0)

        echo "changed=$count" >> "$GITHUB_OUTPUT"
        echo "malware_hits=$malware_count" >> "$GITHUB_OUTPUT"

        echo "Changed deps: $count"
        echo "Malware hits: $malware_count"

        if [ -s changed.json ]; then
          echo "Changed dependencies:"
          cat changed.json
        fi

    - name: Minimum release age
      if: steps.review.outputs.changed != '0'
      shell: bash
      working-directory: ${{ inputs.workdir }}
      env:
        MIN_DAYS: ${{ inputs.minimum-age-days }}
        WARN_ONLY: ${{ inputs.warn-only }}
      run: |
        set -e
        node "$GITHUB_ACTION_PATH/dist/check-age.js" changed.json "$MIN_DAYS" "$WARN_ONLY" || exit $?

    - name: Count age violations (best-effort)
      id: age_count
      if: steps.review.outputs.changed != '0'
      shell: bash
      run: |
        echo "count=0" >> "$GITHUB_OUTPUT" || true

    - name: Count malware hits (best-effort)
      id: adv_count
      if: steps.review.outputs.changed != '0'
      shell: bash
      working-directory: ${{ inputs.workdir }}
      run: |
        if [ -f malware-hits.json ]; then
          echo "count=$(jq 'length' malware-hits.json)" >> "$GITHUB_OUTPUT"
        else
          echo "count=0" >> "$GITHUB_OUTPUT"
        fi

    - name: OpenSSF malicious-packages (warn)
      if: steps.review.outputs.changed != '0' && inputs.enable-ossf == 'true'
      shell: bash
      working-directory: ${{ inputs.workdir }}
      run: |
        set -e
        git clone --depth=1 https://github.com/ossf/malicious-packages /tmp/ossf
        node "$GITHUB_ACTION_PATH/dist/check-ossf.js" changed.json /tmp/ossf || true

    - name: GuardDog (pip)
      if: steps.review.outputs.changed != '0' && inputs.enable-guarddog == 'true'
      shell: bash
      working-directory: ${{ inputs.workdir }}
      run: |
        set -euo pipefail
        pkg_count=$(jq 'length' changed.json 2>/dev/null || echo 0)
        if [ "$pkg_count" = "0" ]; then
          echo "No changed packages -> skip guarddog"
          exit 0
        fi

        # Install GuardDog via pip for better compatibility with self-hosted runners
        echo "Installing GuardDog..."
        python3 -m pip install --quiet guarddog || {
          echo "::warning::Failed to install GuardDog via pip, skipping scan"
          echo "[]" > guarddog.json
          exit 0
        }

        # Convert space-separated rules to --rules flags
        rules_flags=""
        if [ -n "${{ inputs.guarddog-rules }}" ]; then
          for rule in ${{ inputs.guarddog-rules }}; do
            rules_flags="$rules_flags --rules $rule"
          done
        fi

        # Initialize output file as array
        echo "[]" > guarddog.json

        # Filter out packages that are typically safe to speed up scanning
        jq -r '.[] | select(.name | test("^@types/"; "i") | not) | "\(.name) \(.version)"' changed.json > packages_to_scan.txt

        total_packages=$(wc -l < packages_to_scan.txt)
        if [ "$total_packages" = "0" ]; then
          echo "No packages to scan after filtering"
        else
          echo "Scanning $total_packages packages (filtered out @types/* packages)..."

          # Process packages in parallel (up to 3 concurrent processes)
          while IFS= read -r pkg_line; do
            pkg_name=$(echo "$pkg_line" | cut -d' ' -f1)
            pkg_version=$(echo "$pkg_line" | cut -d' ' -f2)

            (
              temp_output=$(mktemp)
              echo "  Scanning $pkg_name@$pkg_version..."

              # Use pip-installed guarddog instead of Docker
              guarddog npm scan "$pkg_name" --version "$pkg_version" $rules_flags \
                --output-format json > "$temp_output" 2>/dev/null || true

              # Add result to results if not empty
              if [ -s "$temp_output" ] && [ "$(jq -r 'length // 0' "$temp_output" 2>/dev/null)" != "0" ]; then
                # Merge with main results
                jq -s '.[0] + [.[1]]' guarddog.json "$temp_output" > guarddog.json.tmp 2>/dev/null && mv guarddog.json.tmp guarddog.json || true
              fi
              rm -f "$temp_output"
            ) &

            # Limit concurrent processes to 3
            while [ $(jobs -r | wc -l) -ge 3 ]; do
              sleep 0.1
            done
          done < packages_to_scan.txt

          # Wait for all background jobs to complete
          wait
        fi
        rm -f packages_to_scan.txt

        if [ -s guarddog.json ]; then
          total=$(jq 'length' guarddog.json 2>/dev/null || echo 0)
          echo "GuardDog findings: $total"
          if [ "$total" != "0" ] && [ "${{ inputs.guarddog-fail }}" = "true" ]; then
            echo "::error::GuardDog reported $total findings"
            exit 1
          fi
        else
          echo "GuardDog produced no output."
        fi

    - name: Count GuardDog findings (best-effort)
      id: guarddog_count
      if: steps.review.outputs.changed != '0' && inputs.enable-guarddog == 'true'
      shell: bash
      working-directory: ${{ inputs.workdir }}
      run: |
        if [ -s guarddog.json ]; then
          echo "count=$(jq 'length' guarddog.json)" >> "$GITHUB_OUTPUT"
        else
          echo "count=0" >> "$GITHUB_OUTPUT"
        fi

    - name: Summary (preview)
      shell: bash
      run: |
        echo "Changed deps: ${{ steps.review.outputs.changed }}"
        echo "Age violations (best-effort): ${{ steps.age_count.outputs.count }}"
        echo "Malware hits (GitHub Advisory): ${{ steps.review.outputs.malware_hits }}"
        echo "GuardDog findings (best-effort): ${{ steps.guarddog_count.outputs.count }}"
