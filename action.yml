name: "Supply Chain Guard"
description: "Multi-ecosystem frozen install check + GitHub Advisory (malware) + OSSF malicious packages + GuardDog analysis"
author: "Pirikara"
branding:
  color: purple
  icon: shield

inputs:
  enable-ossf:
    description: "Check against OpenSSF malicious-packages (warn)"
    default: "true"

  enable-guarddog:
    description: "Run GuardDog npm scan via Docker (heuristics: typo, suspicious install scripts, etc.)"
    default: "false"


  guarddog-fail:
    description: "Fail the job when GuardDog finds findings (>0)"
    default: "false"

  pr-comment:
    description: "Comment security scan results summary on PR"
    default: "false"

  warn-only:
    description: "Warn (do not fail) for: minimumAge / OpenSSF / GuardDog"
    default: "true"

  workdir:
    description: "Working directory (where package.json/lockfile live)"
    default: "."

outputs:
  changed-count:
    description: "Count of changed deps in this PR (from dep-diff)"
    value: ${{ steps.diff.outputs.changed }}
  malware-hits-count:
    description: "Count of GH Advisory (type: malware) hits (best-effort)"
    value: ${{ steps.adv_count.outputs.count }}
  guarddog-findings-count:
    description: "Count of GuardDog findings (best-effort)"
    value: ${{ steps.guarddog_count.outputs.count }}

runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 
      with:
        fetch-depth: 0

    - name: Setup Node.js (for action execution)
      uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444
      with:
        node-version: '24'

    - name: Enable Corepack
      if: hashFiles('**/package.json') != ''
      shell: bash
      run: corepack enable || true

    - name: Verify dist assets exist
      shell: bash
      run: |
        set -e
        test -f "$GITHUB_ACTION_PATH/dist/dependency-review.js" || { echo "::error::dist/dependency-review.js not found (build & commit dist)"; exit 1; }
        test -f "$GITHUB_ACTION_PATH/dist/check-ossf.js" || { echo "::error::dist/check-ossf.js not found (build & commit dist)"; exit 1; }
        test -f "$GITHUB_ACTION_PATH/dist/frozen-install.js" || { echo "::error::dist/frozen-install.js not found (build & commit dist)"; exit 1; }
        test -f "$GITHUB_ACTION_PATH/dist/check-guarddog.js" || { echo "::error::dist/check-guarddog.js not found (build & commit dist)"; exit 1; }

    - name: Frozen install (lock/integrity check)
      shell: bash
      working-directory: ${{ inputs.workdir }}
      run: |
        set -e
        echo "Running multi-ecosystem frozen install check..."
        node "$GITHUB_ACTION_PATH/dist/frozen-install.js"

    - name: Dependency Review (unified check)
      id: review
      shell: bash
      working-directory: ${{ inputs.workdir }}
      env:
        GITHUB_TOKEN: ${{ github.token }}
        WARN_ONLY: ${{ inputs.warn-only }}
      run: |
        set -e
        echo "Running unified dependency review..."

        # Use new unified dependency review that combines dep-diff + malware check
        node "$GITHUB_ACTION_PATH/dist/dependency-review.js" changed.json malware-hits.json "$WARN_ONLY"

        count=$(jq 'length' changed.json 2>/dev/null || echo 0)
        malware_count=$(jq 'length' malware-hits.json 2>/dev/null || echo 0)

        echo "changed=$count" >> "$GITHUB_OUTPUT"
        echo "malware_hits=$malware_count" >> "$GITHUB_OUTPUT"

        echo "Changed deps: $count"
        echo "Malware hits: $malware_count"

        if [ -s changed.json ]; then
          echo "Changed dependencies:"
          cat changed.json
        fi


    - name: Count malware hits (best-effort)
      id: adv_count
      if: steps.review.outputs.changed != '0'
      shell: bash
      working-directory: ${{ inputs.workdir }}
      run: |
        if [ -f malware-hits.json ]; then
          echo "count=$(jq 'length' malware-hits.json)" >> "$GITHUB_OUTPUT"
        else
          echo "count=0" >> "$GITHUB_OUTPUT"
        fi

    - name: OpenSSF malicious-packages (warn)
      if: steps.review.outputs.changed != '0' && inputs.enable-ossf == 'true'
      shell: bash
      working-directory: ${{ inputs.workdir }}
      run: |
        set -e
        git clone --depth=1 https://github.com/ossf/malicious-packages /tmp/ossf
        node "$GITHUB_ACTION_PATH/dist/check-ossf.js" changed.json /tmp/ossf || true

    - name: GuardDog (multi-ecosystem)
      if: steps.review.outputs.changed != '0' && inputs.enable-guarddog == 'true'
      shell: bash
      working-directory: ${{ inputs.workdir }}
      run: |
        set -e
        echo "Running multi-ecosystem GuardDog scan..."
        node "$GITHUB_ACTION_PATH/dist/check-guarddog.js" changed.json "${{ inputs.guarddog-fail }}"

    - name: Comment security scan results on PR
      if: inputs.pr-comment == 'true' && github.event_name == 'pull_request'
      shell: bash
      working-directory: ${{ inputs.workdir }}
      run: |
        echo "Commenting security scan results on PR..."
        node "$GITHUB_ACTION_PATH/dist/pr-comment.js" "${{ inputs.pr-comment }}"

    - name: Count GuardDog findings (best-effort)
      id: guarddog_count
      if: steps.review.outputs.changed != '0' && inputs.enable-guarddog == 'true'
      shell: bash
      working-directory: ${{ inputs.workdir }}
      run: |
        if [ -s guarddog.json ]; then
          echo "count=$(jq 'length' guarddog.json)" >> "$GITHUB_OUTPUT"
        else
          echo "count=0" >> "$GITHUB_OUTPUT"
        fi

    - name: Summary (preview)
      shell: bash
      run: |
        echo "Changed deps: ${{ steps.review.outputs.changed }}"
        echo "Malware hits (GitHub Advisory): ${{ steps.review.outputs.malware_hits }}"
        echo "GuardDog findings (best-effort): ${{ steps.guarddog_count.outputs.count }}"
