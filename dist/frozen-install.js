"use strict";var o=require("child_process"),r=require("fs"),i=class{constructor(){this.name="Node.js"}detect(){return(0,r.existsSync)("package.json")}async validate(){try{let e="";try{e=JSON.parse((0,r.readFileSync)("package.json","utf8")).packageManager||""}catch{}if(e.startsWith("yarn@")&&this.isYarnBerry())console.log("Detected Yarn Berry, performing frozen install..."),(0,o.execSync)(`echo 'checksumBehavior: "throw"' >> .yarnrc.yml`,{stdio:"inherit"}),(0,o.execSync)("YARN_ENABLE_SCRIPTS=false yarn install --immutable --inline-builds",{stdio:"inherit"});else if((0,r.existsSync)("yarn.lock"))console.log("Detected Yarn Classic, performing frozen install..."),(0,o.execSync)("yarn install --frozen-lockfile --ignore-scripts",{stdio:"inherit"});else if((0,r.existsSync)("pnpm-lock.yaml")||e.startsWith("pnpm@")){console.log("Detected pnpm, performing frozen install...");try{(0,o.execSync)("pnpm --version",{stdio:"pipe"})}catch{(0,o.execSync)("corepack prepare pnpm@latest --activate",{stdio:"inherit"})}(0,o.execSync)("pnpm install --frozen-lockfile --ignore-scripts",{stdio:"inherit"})}else(0,r.existsSync)("package-lock.json")?(console.log("Detected npm, performing frozen install..."),(0,o.execSync)("npm ci --ignore-scripts",{stdio:"inherit"})):(console.warn("No lockfile found for Node.js project, falling back to npm ci"),(0,o.execSync)("npm ci --ignore-scripts",{stdio:"inherit"}));return!0}catch(e){return console.error(`Node.js frozen install failed: ${e instanceof Error?e.message:e}`),!1}}isYarnBerry(){try{return!(0,o.execSync)("yarn --version",{encoding:"utf8",stdio:"pipe"}).trim().startsWith("1.")}catch{return!1}}},l=class{constructor(){this.name="Python"}detect(){return(0,r.existsSync)("requirements.txt")||(0,r.existsSync)("poetry.lock")||(0,r.existsSync)("Pipfile.lock")||(0,r.existsSync)("pyproject.toml")}async validate(){try{return(0,r.existsSync)("poetry.lock")?(console.log("Detected Poetry, validating lockfile integrity..."),(0,o.execSync)("poetry check --lock",{stdio:"inherit"}),console.log("Skipping Poetry install due to ignore-scripts (hardcoded for security)")):(0,r.existsSync)("Pipfile.lock")?(console.log("Detected Pipenv, validating lockfile integrity..."),(0,o.execSync)("pipenv verify",{stdio:"inherit"}),console.log("Skipping Pipenv install due to ignore-scripts (hardcoded for security)")):(0,r.existsSync)("requirements.txt")&&(console.log("Detected pip requirements, performing dry-run validation..."),(0,o.execSync)("pip install -r requirements.txt --dry-run",{stdio:"inherit"}),console.log("Skipping pip install due to ignore-scripts (hardcoded for security)")),!0}catch(e){return console.error(`Python frozen install failed: ${e instanceof Error?e.message:e}`),!1}}},c=class{constructor(){this.name="Rust"}detect(){return(0,r.existsSync)("Cargo.toml")}async validate(){try{return(0,r.existsSync)("Cargo.lock")?(console.log("Detected Rust project with Cargo.lock, validating..."),(0,o.execSync)("cargo check --locked",{stdio:"inherit"})):(console.log("Detected Rust project without Cargo.lock, performing check..."),(0,o.execSync)("cargo check",{stdio:"inherit"})),!0}catch(e){return console.error(`Rust validation failed: ${e instanceof Error?e.message:e}`),!1}}},a=class{constructor(){this.name="Go"}detect(){return(0,r.existsSync)("go.mod")}async validate(){try{return console.log("Detected Go project, validating go.mod and go.sum..."),(0,o.execSync)("go mod verify",{stdio:"inherit"}),(0,o.execSync)("go mod download",{stdio:"inherit"}),!0}catch(e){return console.error(`Go module validation failed: ${e instanceof Error?e.message:e}`),!1}}},d=class{constructor(){this.name="Ruby"}detect(){return(0,r.existsSync)("Gemfile")}async validate(){try{return(0,r.existsSync)("Gemfile.lock")?(console.log("Detected Ruby project with Gemfile.lock, performing frozen install..."),(0,o.execSync)("bundle install --deployment --without development test",{stdio:"inherit"})):(console.log("Detected Ruby project without Gemfile.lock, performing bundle install..."),(0,o.execSync)("bundle install",{stdio:"inherit"})),!0}catch(e){return console.error(`Ruby bundle install failed: ${e instanceof Error?e.message:e}`),!1}}},p=class{constructor(){this.name="PHP"}detect(){return(0,r.existsSync)("composer.json")}async validate(){try{return(0,r.existsSync)("composer.lock")?(console.log("Detected PHP project with composer.lock, performing frozen install..."),(0,o.execSync)("composer install --no-dev --no-scripts",{stdio:"inherit"})):(console.log("Detected PHP project without composer.lock, performing composer install..."),(0,o.execSync)("composer install --no-scripts",{stdio:"inherit"})),!0}catch(e){return console.error(`PHP composer install failed: ${e instanceof Error?e.message:e}`),!1}}};async function m(){console.log(`Running frozen install check in current directory: ${process.cwd()}`),console.log("Ignore scripts: true (hardcoded for security)");let e=[new i,new l,new c,new a,new d,new p].filter(n=>n.detect());e.length===0&&(console.warn("No supported package ecosystems detected in this directory"),process.exit(1)),console.log(`Detected ecosystems: ${e.map(n=>n.name).join(", ")}`);let s=!0;for(let n of e)console.log(`
=== Validating ${n.name} ===`),await n.validate()?console.log(`\u2705 ${n.name} validation succeeded`):(console.error(`\u274C ${n.name} validation failed`),s=!1);s?(console.log(`
\u{1F389} All ecosystem validations passed!`),process.exit(0)):(console.error(`
\u{1F4A5} One or more ecosystem validations failed!`),process.exit(1))}m().catch(t=>{console.error(`Unexpected error: ${t instanceof Error?t.message:t}`),process.exit(1)});
