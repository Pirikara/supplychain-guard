"use strict";var l=require("fs"),p=process.env.GITHUB_TOKEN;p||(console.error("GITHUB_TOKEN is required"),process.exit(1));async function u(a){let r=await fetch(`https://api.github.com${a}`,{headers:{"User-Agent":"supplychain-guard",Authorization:`Bearer ${p}`,Accept:"application/vnd.github+json"}});if(!r.ok)throw new Error(`GitHub API ${r.status}: ${r.statusText}`);return r.json()}function h(){let a=process.env.GITHUB_REPOSITORY;if(!a)throw new Error("GITHUB_REPOSITORY environment variable is required");let[r,c]=a.split("/"),s="",e="HEAD";try{let t=process.env.GITHUB_EVENT_PATH;if(t){let o=JSON.parse((0,l.readFileSync)(t,"utf8"));s=o?.pull_request?.base?.sha||"",e=o?.pull_request?.head?.sha||"HEAD"}}catch{s=process.env.GITHUB_BASE_REF||"",e=process.env.GITHUB_SHA||"HEAD"}if(!s)throw new Error("Could not determine base commit SHA");return{base:s,head:e,owner:r,repo:c}}async function y(){let{base:a,head:r,owner:c,repo:s}=h();console.log(`Fetching dependency changes between ${a} and ${r}...`);try{let e=[],t=1,o=100;for(;;){console.log(`Fetching dependency changes page ${t}...`);let n=`/repos/${c}/${s}/dependency-graph/compare/${a}...${r}?per_page=${o}&page=${t}`,i=await u(n);if(!Array.isArray(i)){e=Array.isArray(i)?i:[];break}if(e.push(...i),console.log(`Page ${t}: ${i.length} changes`),i.length<o)break;if(t++,t>50){console.warn("Reached maximum page limit (50), stopping pagination");break}}return console.log(`Found total ${e.length} dependency changes across ${t} pages`),e.filter(n=>n.change_type==="added"||n.change_type==="updated").map(n=>({name:n.name,version:n.version,ecosystem:n.ecosystem,changeType:n.change_type,vulnerabilities:n.vulnerabilities||[]}))}catch(e){throw console.error(`Error fetching dependency changes: ${e instanceof Error?e.message:e}`),e}}async function m(a){let r=[];for(let c of a){let s=c.vulnerabilities.filter(e=>e.advisory.summary.toLowerCase().includes("malware")||e.advisory.description.toLowerCase().includes("malware")||e.advisory.ghsa_id.includes("malware"));s.length>0&&r.push({name:c.name,version:c.version,vulnerabilities:s})}return r}(async function(){let r=process.argv[2]||"changed.json",c=process.argv[3]||"malware-hits.json",s=String(process.argv[4]||"false")==="true";try{let e=await y(),t=e.map(n=>({name:n.name,version:n.version,ecosystem:n.ecosystem}));(0,l.writeFileSync)("changed.json",JSON.stringify(t,null,2));let o=await m(e);if((0,l.writeFileSync)("malware-hits.json",JSON.stringify(o,null,2)),o.length>0){let n=`Malware vulnerabilities detected:
${o.map(i=>`- ${i.name}@${i.version}: ${i.vulnerabilities.map(d=>d.advisory.summary).join(", ")}`).join(`
`)}`;s?console.warn(n):(console.error(n),process.exit(1))}else console.log("No malware vulnerabilities detected in changed dependencies");console.error(`
Summary: ${e.length} dependencies changed`),console.error(`Malware hits: ${o.length}`);let g=e.reduce((n,i)=>n+i.vulnerabilities.length,0);g>0&&console.error(`Total vulnerabilities: ${g}`)}catch(e){console.error(`Error during dependency review: ${e instanceof Error?e.message:e}`),s?console.warn("Dependency review failed, but continuing due to warn-only mode"):process.exit(1)}})();
