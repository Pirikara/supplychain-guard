"use strict";var p=require("child_process"),r=require("fs"),m={npm:"npm",pip:"pypi",go:"go",actions:"github-action"};function y(n,c){return!!(c==="npm"&&n.startsWith("@types/"))}async function h(n,c,a,u){try{console.log(`  Scanning ${n}:${c}@${a}...`);let i=`python3 -m guarddog "${n}" scan "${c}" --version "${a}" ${u} --output-format json`,o=(0,p.execSync)(i,{encoding:"utf8",stdio:"pipe"});if(!o.trim())return null;let g=JSON.parse(o);return g.ecosystem=n,g}catch{return null}}async function D(){try{return console.log("Installing GuardDog..."),process.env.NODE_ENV==="test"?(console.log("Test environment detected, skipping GuardDog installation"),!1):((0,p.execSync)("python3 -m pip install --quiet guarddog",{stdio:"inherit"}),!0)}catch{return console.warn("Failed to install GuardDog via pip, skipping scan"),!1}}async function $(){let n=process.argv[2]||"changed.json",c=(process.argv[3]||"false")==="true";(0,r.existsSync)(n)||(console.error(`Error: ${n} file not found`),process.exit(1));let a=JSON.parse((0,r.readFileSync)(n,"utf8"));if(a.length===0){console.log("No changed packages -> skip guarddog"),(0,r.writeFileSync)("guarddog.json","[]");return}if(!await D()){(0,r.writeFileSync)("guarddog.json","[]");return}let u="",i={};for(let e of a){let s=m[e.ecosystem];s&&(y(e.name,e.ecosystem)||(i[s]||(i[s]=[]),i[s].push({name:e.name,version:e.version})))}let o=[],g=3;for(let[e,s]of Object.entries(i)){if(s.length===0)continue;console.log(`Scanning ${s.length} ${e} packages...`);let t=[];for(let l of s){if(t.length>=g){let d=await Promise.all(t);o.push(...d.filter(f=>f!==null)),t.length=0}t.push(h(e,l.name,l.version,u))}if(t.length>0){let l=await Promise.all(t);o.push(...l.filter(d=>d!==null))}}if((0,r.writeFileSync)("guarddog.json",JSON.stringify(o,null,2)),o.length>0){console.log(`GuardDog findings: ${o.length}`);let e={};for(let s of o)s.ecosystem&&(e[s.ecosystem]=(e[s.ecosystem]||0)+1);for(let[s,t]of Object.entries(e))console.log(`  ${s}: ${t} findings`);c&&(console.error(`GuardDog reported ${o.length} findings across all ecosystems`),process.exit(1))}else console.log("GuardDog produced no findings.")}$().catch(n=>{console.error(`GuardDog scan failed: ${n instanceof Error?n.message:n}`),process.exit(1)});
