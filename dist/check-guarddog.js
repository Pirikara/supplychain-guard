"use strict";var m=require("child_process"),r=require("fs"),$={npm:"npm",pip:"pypi",go:"go",actions:"github-action"};function b(e,i){return!!(i==="npm"&&e.startsWith("@types/"))}async function k(e,i,g,p){try{console.log(`  Scanning ${e}:${i}@${g}...`);let c=`python3 -m guarddog "${e}" scan "${i}" --version "${g}" ${p} --output-format json`,n=(0,m.execSync)(c,{encoding:"utf8",stdio:"pipe"});if(!n.trim())return null;let l=JSON.parse(n);return l.ecosystem=e,l}catch{return null}}async function D(){try{return console.log("Installing GuardDog..."),process.env.NODE_ENV==="test"?(console.log("Test environment detected, skipping GuardDog installation"),!1):((0,m.execSync)("python3 -m pip install --quiet guarddog",{stdio:"inherit"}),!0)}catch{return console.warn("Failed to install GuardDog via pip, skipping scan"),!1}}async function S(){let e=process.argv[2]||"changed.json",i=(process.argv[3]||"false")==="true";(0,r.existsSync)(e)||(console.error(`Error: ${e} file not found`),process.exit(1));let g=JSON.parse((0,r.readFileSync)(e,"utf8"));if(g.length===0){console.log("No changed packages -> skip guarddog"),(0,r.writeFileSync)("guarddog.json","[]");return}if(!await D()){(0,r.writeFileSync)("guarddog.json","[]");return}let p="",c={};for(let o of g){let s=$[o.ecosystem];s&&(b(o.name,o.ecosystem)||(c[s]||(c[s]=[]),c[s].push({name:o.name,version:o.version})))}let n=[],l=8,a=[];for(let[o,s]of Object.entries(c))for(let t of s)a.push({ecosystem:o,name:t.name,version:t.version});if(a.length===0){console.log("No packages to scan"),(0,r.writeFileSync)("guarddog.json","[]");return}console.log(`Scanning ${a.length} packages across all ecosystems (concurrency: ${l})...`);let f=l;for(let o=0;o<a.length;o+=f){let s=a.slice(o,o+f),t=Math.floor(o/f)+1,u=Math.ceil(a.length/f);console.log(`Processing batch ${t}/${u} (${s.length} packages)...`);let y=s.map(d=>k(d.ecosystem,d.name,d.version,p)),h=await Promise.all(y);n.push(...h.filter(d=>d!==null))}if((0,r.writeFileSync)("guarddog.json",JSON.stringify(n,null,2)),n.length>0){console.log(`GuardDog findings: ${n.length}`);let o={};for(let s of n)s.ecosystem&&(o[s.ecosystem]=(o[s.ecosystem]||0)+1);for(let[s,t]of Object.entries(o))console.log(`  ${s}: ${t} findings`);console.log(`
Detailed findings:`);for(let s of n){if(console.log(`
Package: ${s.package}`),s.ecosystem&&console.log(`  Ecosystem: ${s.ecosystem}`),s.errors&&Object.keys(s.errors).length>0){console.log("  Issues found:");for(let[t,u]of Object.entries(s.errors))console.log(`    - ${t}: ${u}`)}if(s.results&&Object.keys(s.results).length>0){console.log("  Additional findings:");for(let[t,u]of Object.entries(s.results))console.log(`    - ${t}: ${JSON.stringify(u)}`)}}i&&(console.error(`GuardDog reported ${n.length} findings across all ecosystems`),process.exit(1))}else console.log("GuardDog produced no findings.")}S().catch(e=>{console.error(`GuardDog scan failed: ${e instanceof Error?e.message:e}`),process.exit(1)});
