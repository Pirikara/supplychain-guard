"use strict";var l=require("child_process"),u=require("fs");function p(n,t,r="."){try{let e=r==="."?t:`${r}/${t}`;return(0,l.execSync)(`git show ${n}:${e}`,{encoding:"utf8",stdio:["ignore","pipe","ignore"]})}catch{return null}}function m(){let n="",t="HEAD";try{let r=JSON.parse((0,u.readFileSync)(process.env.GITHUB_EVENT_PATH,"utf8"));n=r?.pull_request?.base?.sha||"",t=r?.pull_request?.head?.sha||"HEAD"}catch{}if(!n)try{n=(0,l.execSync)("git merge-base HEAD origin/HEAD",{encoding:"utf8"}).trim()}catch{n="HEAD~1"}return{base:n,head:t}}function h(n){let t=new Map,e=JSON.parse(n).packages||{};for(let[s,i]of Object.entries(e))s.startsWith("node_modules/")&&t.set(s.slice(13),i.version);return t}function d(n){let t=new Map,r=n.split(/\r?\n/),e=null;for(let s of r)if(/^".+@|^[^"\s].+@/.test(s)){let i=s.replace(/:$/,"").trim().replace(/^"+|"+$/g,""),o=i.lastIndexOf("@");e=(i.startsWith("@"),i.slice(0,o))}else if(e&&s.trim().startsWith('version "')){let i=s.trim().match(/^version "([^"]+)"/);i&&t.set(e,i[1]),e=null}return t}function v(n){let t=new Map,r=/^ {2}\/(@?[^/]+)\/([^:]+):/;for(let e of n.split(/\r?\n/)){let s=e.match(r);s&&t.set(s[1],s[2])}return t}function y(n){let t=new Map,r=JSON.parse(n);for(let e of["dependencies","devDependencies","optionalDependencies"]){let s=r[e]||{};for(let[i,o]of Object.entries(s))t.set(i,o)}return t}function f(n,t="."){let r=p(n,"package-lock.json",t);if(r)return h(r);let e=p(n,"yarn.lock",t);if(e)return d(e);let s=p(n,"pnpm-lock.yaml",t);if(s)return v(s);let i=p(n,"package.json",t);return i?y(i):new Map}(function(){let{base:t,head:r}=m(),e=".";try{let c=(0,l.execSync)("git rev-parse --show-toplevel",{encoding:"utf8"}).trim(),g=process.cwd();if(g!==c){let a=require("path").relative(c,g);a&&!a.startsWith("..")&&(e=a)}}catch{}let s=f(t,e),i=f(r,e),o=[];for(let[c,g]of i.entries()){let a=s.get(c);(!a||a!==g)&&o.push({name:c,version:g})}process.stdout.write(JSON.stringify(o,null,2))})();
