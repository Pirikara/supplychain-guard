"use strict";var g=require("child_process"),f=require("fs");function c(n,t){try{return(0,g.execSync)(`git show ${n}:${t}`,{encoding:"utf8",stdio:["ignore","pipe","ignore"]})}catch{return null}}function u(){let n="",t="HEAD";try{let r=JSON.parse((0,f.readFileSync)(process.env.GITHUB_EVENT_PATH,"utf8"));n=r?.pull_request?.base?.sha||"",t=r?.pull_request?.head?.sha||"HEAD"}catch{}if(!n)try{n=(0,g.execSync)("git merge-base HEAD origin/HEAD",{encoding:"utf8"}).trim()}catch{n="HEAD~1"}return{base:n,head:t}}function m(n){let t=new Map,e=JSON.parse(n).packages||{};for(let[s,i]of Object.entries(e))s.startsWith("node_modules/")&&t.set(s.slice(13),i.version);return t}function d(n){let t=new Map,r=n.split(/\r?\n/),e=null;for(let s of r)if(/^".+@|^[^"\s].+@/.test(s)){let i=s.replace(/:$/,"").trim().replace(/^"+|"+$/g,""),o=i.lastIndexOf("@");e=(i.startsWith("@"),i.slice(0,o))}else if(e&&s.trim().startsWith('version "')){let i=s.trim().match(/^version "([^"]+)"/);i&&t.set(e,i[1]),e=null}return t}function h(n){let t=new Map,r=/^ {2}\/(@?[^/]+)\/([^:]+):/;for(let e of n.split(/\r?\n/)){let s=e.match(r);s&&t.set(s[1],s[2])}return t}function k(n){let t=new Map,r=JSON.parse(n);for(let e of["dependencies","devDependencies","optionalDependencies"]){let s=r[e]||{};for(let[i,o]of Object.entries(s))t.set(i,o)}return t}function l(n){let t=c(n,"package-lock.json");if(t)return m(t);let r=c(n,"yarn.lock");if(r)return d(r);let e=c(n,"pnpm-lock.yaml");if(e)return h(e);let s=c(n,"package.json");return s?k(s):new Map}(function(){let{base:t,head:r}=u(),e=l(t),s=l(r),i=[];for(let[o,a]of s.entries()){let p=e.get(o);(!p||p!==a)&&i.push({name:o,version:a})}process.stdout.write(JSON.stringify(i,null,2))})();
